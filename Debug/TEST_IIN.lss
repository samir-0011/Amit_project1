
TEST_IIN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002066  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00002066  000020fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080006a  0080006a  00002104  2**0
                  ALLOC
  3 .stab         00002238  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dfb  00000000  00000000  0000433c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005137  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005277  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000053e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000090b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009883  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__vector_1>
       8:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__vector_2>
       c:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <main>
      8a:	0c 94 31 10 	jmp	0x2062	; 0x2062 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 10 	jmp	0x202c	; 0x202c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 10 	jmp	0x202c	; 0x202c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 10 	jmp	0x200c	; 0x200c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 10 	jmp	0x204c	; 0x204c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include"BIT_MATH.h"

#include"ADC_Private.h"

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*1-Select Reference Voltage-->  (AVCC)*/
	SET_BIT(ADMUX,6);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	/*2- Select Left or Right Adjust--> (RIGHT Adjust) */
	CLR_BIT(ADMUX,5);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
	/*3- Select Prescaler (128)*/
	SET_BIT(ADCSRA,2);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,0);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	8c 93       	st	X, r24
	/*4- ADC Enable*/
	SET_BIT(ADCSRA,7);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u16StartConversion>:
u16 ADC_u16StartConversion(u8 Copy_u8Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <ADC_u16StartConversion+0x6>
     bbc:	0f 92       	push	r0
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	8b 83       	std	Y+3, r24	; 0x03
	u16 LOC_u16DataValue=0;
     bc4:	1a 82       	std	Y+2, r1	; 0x02
     bc6:	19 82       	std	Y+1, r1	; 0x01
	/*Mask the 5 MSB IN the data */
	Copy_u8Channel&=0x07;
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	87 70       	andi	r24, 0x07	; 7
     bcc:	8b 83       	std	Y+3, r24	; 0x03
	/*MASK The 5 LSB In ADMUX Register */
	ADMUX&=0xE0;
     bce:	a7 e2       	ldi	r26, 0x27	; 39
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e2       	ldi	r30, 0x27	; 39
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 7e       	andi	r24, 0xE0	; 224
     bda:	8c 93       	st	X, r24
	/*Set your channel*/
	ADMUX|=Copy_u8Channel;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	90 81       	ld	r25, Z
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	89 2b       	or	r24, r25
     bea:	8c 93       	st	X, r24
   /*Start Conversion*/
	SET_BIT(ADCSRA,6);
     bec:	a6 e2       	ldi	r26, 0x26	; 38
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 64       	ori	r24, 0x40	; 64
     bf8:	8c 93       	st	X, r24
	/*wait ADC Flag until ADC End conversion*/
	while(GET_BIT(ADCSRA,4)==0);
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	82 95       	swap	r24
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	81 70       	andi	r24, 0x01	; 1
     c0a:	90 70       	andi	r25, 0x00	; 0
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	a9 f3       	breq	.-22     	; 0xbfa <ADC_u16StartConversion+0x44>
	//LOC_u16DataValue=ADCL|(ADCH<<8);
	LOC_u16DataValue=ADC;
     c10:	e4 e2       	ldi	r30, 0x24	; 36
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	9a 83       	std	Y+2, r25	; 0x02
     c1a:	89 83       	std	Y+1, r24	; 0x01
	return LOC_u16DataValue;
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <ADC_voidInit_Interrupt>:

void ADC_voidInit_Interrupt(void)
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
	/*1-Select Reference Voltage-->  (AVCC)*/
		SET_BIT(ADMUX,6);
     c34:	a7 e2       	ldi	r26, 0x27	; 39
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e2       	ldi	r30, 0x27	; 39
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 64       	ori	r24, 0x40	; 64
     c40:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,7);
     c42:	a7 e2       	ldi	r26, 0x27	; 39
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e2       	ldi	r30, 0x27	; 39
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 77       	andi	r24, 0x7F	; 127
     c4e:	8c 93       	st	X, r24
		/*2- Select Left or Right Adjust--> (RIGHT Adjust) */
		CLR_BIT(ADMUX,5);
     c50:	a7 e2       	ldi	r26, 0x27	; 39
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e7 e2       	ldi	r30, 0x27	; 39
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	8f 7d       	andi	r24, 0xDF	; 223
     c5c:	8c 93       	st	X, r24
		/*3- Select Prescaler (128)*/
		SET_BIT(ADCSRA,2);
     c5e:	a6 e2       	ldi	r26, 0x26	; 38
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e6 e2       	ldi	r30, 0x26	; 38
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,1);
     c6c:	a6 e2       	ldi	r26, 0x26	; 38
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	e6 e2       	ldi	r30, 0x26	; 38
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	82 60       	ori	r24, 0x02	; 2
     c78:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,0);
     c7a:	a6 e2       	ldi	r26, 0x26	; 38
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e6 e2       	ldi	r30, 0x26	; 38
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	81 60       	ori	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
		/*4- ADC Enable*/
		SET_BIT(ADCSRA,7);
     c88:	a6 e2       	ldi	r26, 0x26	; 38
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e6 e2       	ldi	r30, 0x26	; 38
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	80 68       	ori	r24, 0x80	; 128
     c94:	8c 93       	st	X, r24
		/*5- Enable Interrupt*/
		SET_BIT(ADCSRA,3);
     c96:	a6 e2       	ldi	r26, 0x26	; 38
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e6 e2       	ldi	r30, 0x26	; 38
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	88 60       	ori	r24, 0x08	; 8
     ca2:	8c 93       	st	X, r24

}
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <ADC_u16StartConversion_Interrupt>:

void ADC_u16StartConversion_Interrupt(u8 Copy_u8Channel)
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	0f 92       	push	r0
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	89 83       	std	Y+1, r24	; 0x01
		/*Mask the 5 MSB IN the data */
		Copy_u8Channel&=0x07;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	87 70       	andi	r24, 0x07	; 7
     cba:	89 83       	std	Y+1, r24	; 0x01
		/*MASK The 5 LSB In ADMUX Register */
		ADMUX&=0xE0;
     cbc:	a7 e2       	ldi	r26, 0x27	; 39
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e7 e2       	ldi	r30, 0x27	; 39
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 7e       	andi	r24, 0xE0	; 224
     cc8:	8c 93       	st	X, r24
		/*Set your channel*/
		ADMUX|=Copy_u8Channel;
     cca:	a7 e2       	ldi	r26, 0x27	; 39
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e7 e2       	ldi	r30, 0x27	; 39
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	90 81       	ld	r25, Z
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	89 2b       	or	r24, r25
     cd8:	8c 93       	st	X, r24
	   /*Start Conversion*/
		SET_BIT(ADCSRA,6);
     cda:	a6 e2       	ldi	r26, 0x26	; 38
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e6 e2       	ldi	r30, 0x26	; 38
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	80 64       	ori	r24, 0x40	; 64
     ce6:	8c 93       	st	X, r24
}
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <ADC_u16DigitalRead>:

u16 ADC_u16DigitalRead(void)
{
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
	return ADC;
     cf8:	e4 e2       	ldi	r30, 0x24	; 36
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	91 81       	ldd	r25, Z+1	; 0x01
}
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <DIO_u8SetPinDirection>:
#include "DIO_I.h"
#include "DIO_P.h"


u8 DIO_u8SetPinDirection (u8 Copy_u8PinNumber, u8 Copy_u8PortNumber , u8 Copy_u8PinDirection)
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	28 97       	sbiw	r28, 0x08	; 8
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	8a 83       	std	Y+2, r24	; 0x02
     d1c:	6b 83       	std	Y+3, r22	; 0x03
     d1e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State =OK;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinNumber<8 && Copy_u8PinNumber>=0){
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	88 30       	cpi	r24, 0x08	; 8
     d28:	08 f0       	brcs	.+2      	; 0xd2c <DIO_u8SetPinDirection+0x26>
     d2a:	f1 c0       	rjmp	.+482    	; 0xf0e <DIO_u8SetPinDirection+0x208>

		if (Copy_u8PinDirection == PIN_OUTPUT)
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	09 f0       	breq	.+2      	; 0xd34 <DIO_u8SetPinDirection+0x2e>
     d32:	71 c0       	rjmp	.+226    	; 0xe16 <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8PortNumber)
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	38 87       	std	Y+8, r19	; 0x08
     d3c:	2f 83       	std	Y+7, r18	; 0x07
     d3e:	8f 81       	ldd	r24, Y+7	; 0x07
     d40:	98 85       	ldd	r25, Y+8	; 0x08
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	91 05       	cpc	r25, r1
     d46:	49 f1       	breq	.+82     	; 0xd9a <DIO_u8SetPinDirection+0x94>
     d48:	2f 81       	ldd	r18, Y+7	; 0x07
     d4a:	38 85       	ldd	r19, Y+8	; 0x08
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	2c f4       	brge	.+10     	; 0xd5c <DIO_u8SetPinDirection+0x56>
     d52:	8f 81       	ldd	r24, Y+7	; 0x07
     d54:	98 85       	ldd	r25, Y+8	; 0x08
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	61 f0       	breq	.+24     	; 0xd72 <DIO_u8SetPinDirection+0x6c>
     d5a:	5b c0       	rjmp	.+182    	; 0xe12 <DIO_u8SetPinDirection+0x10c>
     d5c:	2f 81       	ldd	r18, Y+7	; 0x07
     d5e:	38 85       	ldd	r19, Y+8	; 0x08
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	71 f1       	breq	.+92     	; 0xdc2 <DIO_u8SetPinDirection+0xbc>
     d66:	8f 81       	ldd	r24, Y+7	; 0x07
     d68:	98 85       	ldd	r25, Y+8	; 0x08
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	e9 f1       	breq	.+122    	; 0xdea <DIO_u8SetPinDirection+0xe4>
     d70:	50 c0       	rjmp	.+160    	; 0xe12 <DIO_u8SetPinDirection+0x10c>
			{
			case DIO_PORTA:
				SET_BIT(DDRA,Copy_u8PinNumber);
     d72:	aa e3       	ldi	r26, 0x3A	; 58
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ea e3       	ldi	r30, 0x3A	; 58
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_u8SetPinDirection+0x8a>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_u8SetPinDirection+0x86>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	bb c0       	rjmp	.+374    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB,Copy_u8PinNumber);
     d9a:	a7 e3       	ldi	r26, 0x37	; 55
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e7 e3       	ldi	r30, 0x37	; 55
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_u8SetPinDirection+0xb2>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_u8SetPinDirection+0xae>
     dbc:	84 2b       	or	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	a7 c0       	rjmp	.+334    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC,Copy_u8PinNumber);
     dc2:	a4 e3       	ldi	r26, 0x34	; 52
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e4 e3       	ldi	r30, 0x34	; 52
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_u8SetPinDirection+0xda>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_u8SetPinDirection+0xd6>
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	93 c0       	rjmp	.+294    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD,Copy_u8PinNumber);
     dea:	a1 e3       	ldi	r26, 0x31	; 49
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e1 e3       	ldi	r30, 0x31	; 49
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_u8SetPinDirection+0x102>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_u8SetPinDirection+0xfe>
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	7f c0       	rjmp	.+254    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
				break;
			default:
				Error_State =NOK;
     e12:	19 82       	std	Y+1, r1	; 0x01
     e14:	7d c0       	rjmp	.+250    	; 0xf10 <DIO_u8SetPinDirection+0x20a>

			}
		}


		else if (Copy_u8PinDirection == PIN_INPUT)
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	88 23       	and	r24, r24
     e1a:	09 f0       	breq	.+2      	; 0xe1e <DIO_u8SetPinDirection+0x118>
     e1c:	76 c0       	rjmp	.+236    	; 0xf0a <DIO_u8SetPinDirection+0x204>
		{
			switch (Copy_u8PortNumber)
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	3e 83       	std	Y+6, r19	; 0x06
     e26:	2d 83       	std	Y+5, r18	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	91 05       	cpc	r25, r1
     e30:	59 f1       	breq	.+86     	; 0xe88 <DIO_u8SetPinDirection+0x182>
     e32:	2d 81       	ldd	r18, Y+5	; 0x05
     e34:	3e 81       	ldd	r19, Y+6	; 0x06
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	31 05       	cpc	r19, r1
     e3a:	2c f4       	brge	.+10     	; 0xe46 <DIO_u8SetPinDirection+0x140>
     e3c:	8d 81       	ldd	r24, Y+5	; 0x05
     e3e:	9e 81       	ldd	r25, Y+6	; 0x06
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	69 f0       	breq	.+26     	; 0xe5e <DIO_u8SetPinDirection+0x158>
     e44:	60 c0       	rjmp	.+192    	; 0xf06 <DIO_u8SetPinDirection+0x200>
     e46:	2d 81       	ldd	r18, Y+5	; 0x05
     e48:	3e 81       	ldd	r19, Y+6	; 0x06
     e4a:	22 30       	cpi	r18, 0x02	; 2
     e4c:	31 05       	cpc	r19, r1
     e4e:	89 f1       	breq	.+98     	; 0xeb2 <DIO_u8SetPinDirection+0x1ac>
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	83 30       	cpi	r24, 0x03	; 3
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <DIO_u8SetPinDirection+0x156>
     e5a:	40 c0       	rjmp	.+128    	; 0xedc <DIO_u8SetPinDirection+0x1d6>
     e5c:	54 c0       	rjmp	.+168    	; 0xf06 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_PORTA:
				CLR_BIT(DDRA,Copy_u8PinNumber);
     e5e:	aa e3       	ldi	r26, 0x3A	; 58
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea e3       	ldi	r30, 0x3A	; 58
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_u8SetPinDirection+0x176>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_u8SetPinDirection+0x172>
     e80:	80 95       	com	r24
     e82:	84 23       	and	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	44 c0       	rjmp	.+136    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTB:
				CLR_BIT(DDRB,Copy_u8PinNumber);
     e88:	a7 e3       	ldi	r26, 0x37	; 55
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e7 e3       	ldi	r30, 0x37	; 55
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_u8SetPinDirection+0x1a0>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_u8SetPinDirection+0x19c>
     eaa:	80 95       	com	r24
     eac:	84 23       	and	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	2f c0       	rjmp	.+94     	; 0xf10 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTC:
				CLR_BIT(DDRC,Copy_u8PinNumber);
     eb2:	a4 e3       	ldi	r26, 0x34	; 52
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e4 e3       	ldi	r30, 0x34	; 52
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_u8SetPinDirection+0x1ca>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_u8SetPinDirection+0x1c6>
     ed4:	80 95       	com	r24
     ed6:	84 23       	and	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	1a c0       	rjmp	.+52     	; 0xf10 <DIO_u8SetPinDirection+0x20a>
				break;
			case DIO_PORTD:
				CLR_BIT(DDRD,Copy_u8PinNumber);
     edc:	a1 e3       	ldi	r26, 0x31	; 49
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e1 e3       	ldi	r30, 0x31	; 49
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_u8SetPinDirection+0x1f4>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_u8SetPinDirection+0x1f0>
     efe:	80 95       	com	r24
     f00:	84 23       	and	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <DIO_u8SetPinDirection+0x20a>
				break;
			default:
				Error_State =NOK;
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <DIO_u8SetPinDirection+0x20a>
			}
		}

		else
		{
			Error_State =NOK;
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <DIO_u8SetPinDirection+0x20a>
		}
	}
	else
	{
		Error_State =NOK;
     f0e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_State ;
     f10:	89 81       	ldd	r24, Y+1	; 0x01
}
     f12:	28 96       	adiw	r28, 0x08	; 8
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue	 (u8 Copy_u8PinNumber, u8 Copy_u8PortNumber , u8 Copy_u8PinValue)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <DIO_u8SetPinValue+0x6>
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <DIO_u8SetPinValue+0x8>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DIO_u8SetPinValue+0xa>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	8a 83       	std	Y+2, r24	; 0x02
     f34:	6b 83       	std	Y+3, r22	; 0x03
     f36:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State = OK;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortNumber)
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	3e 83       	std	Y+6, r19	; 0x06
     f44:	2d 83       	std	Y+5, r18	; 0x05
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	91 05       	cpc	r25, r1
     f4e:	09 f4       	brne	.+2      	; 0xf52 <DIO_u8SetPinValue+0x2e>
     f50:	48 c0       	rjmp	.+144    	; 0xfe2 <DIO_u8SetPinValue+0xbe>
     f52:	2d 81       	ldd	r18, Y+5	; 0x05
     f54:	3e 81       	ldd	r19, Y+6	; 0x06
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	2c f4       	brge	.+10     	; 0xf66 <DIO_u8SetPinValue+0x42>
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	71 f0       	breq	.+28     	; 0xf80 <DIO_u8SetPinValue+0x5c>
     f64:	d1 c0       	rjmp	.+418    	; 0x1108 <DIO_u8SetPinValue+0x1e4>
     f66:	2d 81       	ldd	r18, Y+5	; 0x05
     f68:	3e 81       	ldd	r19, Y+6	; 0x06
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <DIO_u8SetPinValue+0x4e>
     f70:	69 c0       	rjmp	.+210    	; 0x1044 <DIO_u8SetPinValue+0x120>
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	91 05       	cpc	r25, r1
     f7a:	09 f4       	brne	.+2      	; 0xf7e <DIO_u8SetPinValue+0x5a>
     f7c:	94 c0       	rjmp	.+296    	; 0x10a6 <DIO_u8SetPinValue+0x182>
     f7e:	c4 c0       	rjmp	.+392    	; 0x1108 <DIO_u8SetPinValue+0x1e4>
	{
	case DIO_PORTA:
		if (Copy_u8PinValue == PIN_HIGH)
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	a1 f4       	brne	.+40     	; 0xfae <DIO_u8SetPinValue+0x8a>
		{
			SET_BIT(PORTA,Copy_u8PinNumber);
     f86:	ab e3       	ldi	r26, 0x3B	; 59
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	eb e3       	ldi	r30, 0x3B	; 59
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_u8SetPinValue+0x80>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_u8SetPinValue+0x7c>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	ae c0       	rjmp	.+348    	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		else if (Copy_u8PinValue == PIN_LOW)
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	88 23       	and	r24, r24
     fb2:	a9 f4       	brne	.+42     	; 0xfde <DIO_u8SetPinValue+0xba>
		{
			CLR_BIT(PORTA,Copy_u8PinNumber);
     fb4:	ab e3       	ldi	r26, 0x3B	; 59
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e3       	ldi	r30, 0x3B	; 59
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_u8SetPinValue+0xae>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_u8SetPinValue+0xaa>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	96 c0       	rjmp	.+300    	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		else
		{
			Error_State = NOK;
     fde:	19 82       	std	Y+1, r1	; 0x01
     fe0:	94 c0       	rjmp	.+296    	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		break;

	case DIO_PORTB:
		if (Copy_u8PinValue == PIN_HIGH)
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	a1 f4       	brne	.+40     	; 0x1010 <DIO_u8SetPinValue+0xec>
		{
			SET_BIT(PORTB,Copy_u8PinNumber);
     fe8:	a8 e3       	ldi	r26, 0x38	; 56
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e8 e3       	ldi	r30, 0x38	; 56
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_u8SetPinValue+0xe2>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_u8SetPinValue+0xde>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	7d c0       	rjmp	.+250    	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		else if (Copy_u8PinValue == PIN_LOW)
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	88 23       	and	r24, r24
    1014:	a9 f4       	brne	.+42     	; 0x1040 <DIO_u8SetPinValue+0x11c>
		{
			CLR_BIT(PORTB,Copy_u8PinNumber);
    1016:	a8 e3       	ldi	r26, 0x38	; 56
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e8 e3       	ldi	r30, 0x38	; 56
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_u8SetPinValue+0x110>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_u8SetPinValue+0x10c>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	65 c0       	rjmp	.+202    	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		else
		{
			Error_State = NOK;
    1040:	19 82       	std	Y+1, r1	; 0x01
    1042:	63 c0       	rjmp	.+198    	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		break;

	case DIO_PORTC:
		if (Copy_u8PinValue == PIN_HIGH)
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	a1 f4       	brne	.+40     	; 0x1072 <DIO_u8SetPinValue+0x14e>
		{
			SET_BIT(PORTC,Copy_u8PinNumber);
    104a:	a5 e3       	ldi	r26, 0x35	; 53
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e3       	ldi	r30, 0x35	; 53
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_u8SetPinValue+0x144>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_u8SetPinValue+0x140>
    106c:	84 2b       	or	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	4c c0       	rjmp	.+152    	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		else if (Copy_u8PinValue == PIN_LOW)
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	88 23       	and	r24, r24
    1076:	a9 f4       	brne	.+42     	; 0x10a2 <DIO_u8SetPinValue+0x17e>
		{
			CLR_BIT(PORTC,Copy_u8PinNumber);
    1078:	a5 e3       	ldi	r26, 0x35	; 53
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e3       	ldi	r30, 0x35	; 53
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_u8SetPinValue+0x172>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_u8SetPinValue+0x16e>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	34 c0       	rjmp	.+104    	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		else
		{
			Error_State = NOK;
    10a2:	19 82       	std	Y+1, r1	; 0x01
    10a4:	32 c0       	rjmp	.+100    	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		break;

	case DIO_PORTD:
		if (Copy_u8PinValue == PIN_HIGH)
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	a1 f4       	brne	.+40     	; 0x10d4 <DIO_u8SetPinValue+0x1b0>
		{
			SET_BIT(PORTD,Copy_u8PinNumber);
    10ac:	a2 e3       	ldi	r26, 0x32	; 50
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e2 e3       	ldi	r30, 0x32	; 50
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8SetPinValue+0x1a6>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_u8SetPinValue+0x1a2>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	1b c0       	rjmp	.+54     	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		else if (Copy_u8PinValue == PIN_LOW)
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	88 23       	and	r24, r24
    10d8:	a9 f4       	brne	.+42     	; 0x1104 <DIO_u8SetPinValue+0x1e0>
		{
			CLR_BIT(PORTD,Copy_u8PinNumber);
    10da:	a2 e3       	ldi	r26, 0x32	; 50
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e2 e3       	ldi	r30, 0x32	; 50
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_u8SetPinValue+0x1d4>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_u8SetPinValue+0x1d0>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	03 c0       	rjmp	.+6      	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		else
		{
			Error_State = NOK;
    1104:	19 82       	std	Y+1, r1	; 0x01
    1106:	01 c0       	rjmp	.+2      	; 0x110a <DIO_u8SetPinValue+0x1e6>
		}
		break;
	default:
		Error_State =NOK;
    1108:	19 82       	std	Y+1, r1	; 0x01
		break;

	}
	return Error_State;
    110a:	89 81       	ldd	r24, Y+1	; 0x01

}
    110c:	26 96       	adiw	r28, 0x06	; 6
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue	 (u8 Copy_u8PinNumber, u8 Copy_u8PortNumber , u8* Copy_u8PinValue)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	28 97       	sbiw	r28, 0x08	; 8
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	8a 83       	std	Y+2, r24	; 0x02
    1134:	6b 83       	std	Y+3, r22	; 0x03
    1136:	5d 83       	std	Y+5, r21	; 0x05
    1138:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State = OK;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinNumber < DIO_PIN0) || (Copy_u8PinNumber > DIO_PIN7))
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	88 30       	cpi	r24, 0x08	; 8
    1142:	10 f0       	brcs	.+4      	; 0x1148 <DIO_u8GetPinValue+0x2a>
	{
		return NOK;
    1144:	18 86       	std	Y+8, r1	; 0x08
    1146:	74 c0       	rjmp	.+232    	; 0x1230 <DIO_u8GetPinValue+0x112>
	}
	else
	{
		switch (Copy_u8PortNumber)
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3f 83       	std	Y+7, r19	; 0x07
    1150:	2e 83       	std	Y+6, r18	; 0x06
    1152:	4e 81       	ldd	r20, Y+6	; 0x06
    1154:	5f 81       	ldd	r21, Y+7	; 0x07
    1156:	41 30       	cpi	r20, 0x01	; 1
    1158:	51 05       	cpc	r21, r1
    115a:	59 f1       	breq	.+86     	; 0x11b2 <DIO_u8GetPinValue+0x94>
    115c:	8e 81       	ldd	r24, Y+6	; 0x06
    115e:	9f 81       	ldd	r25, Y+7	; 0x07
    1160:	82 30       	cpi	r24, 0x02	; 2
    1162:	91 05       	cpc	r25, r1
    1164:	34 f4       	brge	.+12     	; 0x1172 <DIO_u8GetPinValue+0x54>
    1166:	2e 81       	ldd	r18, Y+6	; 0x06
    1168:	3f 81       	ldd	r19, Y+7	; 0x07
    116a:	21 15       	cp	r18, r1
    116c:	31 05       	cpc	r19, r1
    116e:	69 f0       	breq	.+26     	; 0x118a <DIO_u8GetPinValue+0x6c>
    1170:	5c c0       	rjmp	.+184    	; 0x122a <DIO_u8GetPinValue+0x10c>
    1172:	4e 81       	ldd	r20, Y+6	; 0x06
    1174:	5f 81       	ldd	r21, Y+7	; 0x07
    1176:	42 30       	cpi	r20, 0x02	; 2
    1178:	51 05       	cpc	r21, r1
    117a:	79 f1       	breq	.+94     	; 0x11da <DIO_u8GetPinValue+0xbc>
    117c:	8e 81       	ldd	r24, Y+6	; 0x06
    117e:	9f 81       	ldd	r25, Y+7	; 0x07
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	91 05       	cpc	r25, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <DIO_u8GetPinValue+0x6a>
    1186:	3d c0       	rjmp	.+122    	; 0x1202 <DIO_u8GetPinValue+0xe4>
    1188:	50 c0       	rjmp	.+160    	; 0x122a <DIO_u8GetPinValue+0x10c>
		{
		case DIO_PORTA:

			*Copy_u8PinValue=GET_BIT(PORTA,Copy_u8PinNumber);
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a9 01       	movw	r20, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_u8GetPinValue+0x84>
    119e:	55 95       	asr	r21
    11a0:	47 95       	ror	r20
    11a2:	8a 95       	dec	r24
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_u8GetPinValue+0x80>
    11a6:	ca 01       	movw	r24, r20
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	ec 81       	ldd	r30, Y+4	; 0x04
    11ac:	fd 81       	ldd	r31, Y+5	; 0x05
    11ae:	80 83       	st	Z, r24
    11b0:	3d c0       	rjmp	.+122    	; 0x122c <DIO_u8GetPinValue+0x10e>
			break;

		case DIO_PORTB:
			*Copy_u8PinValue=GET_BIT(PORTB,Copy_u8PinNumber);
    11b2:	e8 e3       	ldi	r30, 0x38	; 56
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a9 01       	movw	r20, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_u8GetPinValue+0xac>
    11c6:	55 95       	asr	r21
    11c8:	47 95       	ror	r20
    11ca:	8a 95       	dec	r24
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_u8GetPinValue+0xa8>
    11ce:	ca 01       	movw	r24, r20
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	ec 81       	ldd	r30, Y+4	; 0x04
    11d4:	fd 81       	ldd	r31, Y+5	; 0x05
    11d6:	80 83       	st	Z, r24
    11d8:	29 c0       	rjmp	.+82     	; 0x122c <DIO_u8GetPinValue+0x10e>
			break;

		case DIO_PORTC:
			*Copy_u8PinValue=GET_BIT(PORTC,Copy_u8PinNumber);
    11da:	e5 e3       	ldi	r30, 0x35	; 53
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_u8GetPinValue+0xd4>
    11ee:	55 95       	asr	r21
    11f0:	47 95       	ror	r20
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_u8GetPinValue+0xd0>
    11f6:	ca 01       	movw	r24, r20
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	ec 81       	ldd	r30, Y+4	; 0x04
    11fc:	fd 81       	ldd	r31, Y+5	; 0x05
    11fe:	80 83       	st	Z, r24
    1200:	15 c0       	rjmp	.+42     	; 0x122c <DIO_u8GetPinValue+0x10e>
			break;

		case DIO_PORTD:
			*Copy_u8PinValue=GET_BIT(PORTD,Copy_u8PinNumber);
    1202:	e2 e3       	ldi	r30, 0x32	; 50
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a9 01       	movw	r20, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_u8GetPinValue+0xfc>
    1216:	55 95       	asr	r21
    1218:	47 95       	ror	r20
    121a:	8a 95       	dec	r24
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_u8GetPinValue+0xf8>
    121e:	ca 01       	movw	r24, r20
    1220:	81 70       	andi	r24, 0x01	; 1
    1222:	ec 81       	ldd	r30, Y+4	; 0x04
    1224:	fd 81       	ldd	r31, Y+5	; 0x05
    1226:	80 83       	st	Z, r24
    1228:	01 c0       	rjmp	.+2      	; 0x122c <DIO_u8GetPinValue+0x10e>
			break;
		default:
			Error_State =NOK;
    122a:	19 82       	std	Y+1, r1	; 0x01
		}
	}



	return Error_State;
    122c:	59 81       	ldd	r21, Y+1	; 0x01
    122e:	58 87       	std	Y+8, r21	; 0x08
    1230:	88 85       	ldd	r24, Y+8	; 0x08


}
    1232:	28 96       	adiw	r28, 0x08	; 8
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <DIO_u8TogglePinValue>:
u8 DIO_u8TogglePinValue	 (u8 Copy_u8PinNumber, u8 Copy_u8PortNumber )
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <DIO_u8TogglePinValue+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <DIO_u8TogglePinValue+0x8>
    124c:	00 d0       	rcall	.+0      	; 0x124e <DIO_u8TogglePinValue+0xa>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8a 83       	std	Y+2, r24	; 0x02
    1254:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_State = OK;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinNumber < DIO_PIN0) || (Copy_u8PinNumber > DIO_PIN7))
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	10 f0       	brcs	.+4      	; 0x1264 <DIO_u8TogglePinValue+0x20>
	{
		return NOK;
    1260:	1e 82       	std	Y+6, r1	; 0x06
    1262:	72 c0       	rjmp	.+228    	; 0x1348 <DIO_u8TogglePinValue+0x104>
	}
	else
	{
		switch (Copy_u8PortNumber)
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3d 83       	std	Y+5, r19	; 0x05
    126c:	2c 83       	std	Y+4, r18	; 0x04
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	9d 81       	ldd	r25, Y+5	; 0x05
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	49 f1       	breq	.+82     	; 0x12ca <DIO_u8TogglePinValue+0x86>
    1278:	2c 81       	ldd	r18, Y+4	; 0x04
    127a:	3d 81       	ldd	r19, Y+5	; 0x05
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	2c f4       	brge	.+10     	; 0x128c <DIO_u8TogglePinValue+0x48>
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	9d 81       	ldd	r25, Y+5	; 0x05
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	61 f0       	breq	.+24     	; 0x12a2 <DIO_u8TogglePinValue+0x5e>
    128a:	5b c0       	rjmp	.+182    	; 0x1342 <DIO_u8TogglePinValue+0xfe>
    128c:	2c 81       	ldd	r18, Y+4	; 0x04
    128e:	3d 81       	ldd	r19, Y+5	; 0x05
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	71 f1       	breq	.+92     	; 0x12f2 <DIO_u8TogglePinValue+0xae>
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	e9 f1       	breq	.+122    	; 0x131a <DIO_u8TogglePinValue+0xd6>
    12a0:	50 c0       	rjmp	.+160    	; 0x1342 <DIO_u8TogglePinValue+0xfe>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA,Copy_u8PinNumber);
    12a2:	ab e3       	ldi	r26, 0x3B	; 59
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	eb e3       	ldi	r30, 0x3B	; 59
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8TogglePinValue+0x7c>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8TogglePinValue+0x78>
    12c4:	84 27       	eor	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	3d c0       	rjmp	.+122    	; 0x1344 <DIO_u8TogglePinValue+0x100>
			break;

		case DIO_PORTB:
			TOGGLE_BIT(PORTB,Copy_u8PinNumber);
    12ca:	a8 e3       	ldi	r26, 0x38	; 56
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e8 e3       	ldi	r30, 0x38	; 56
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8TogglePinValue+0xa4>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8TogglePinValue+0xa0>
    12ec:	84 27       	eor	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	29 c0       	rjmp	.+82     	; 0x1344 <DIO_u8TogglePinValue+0x100>
			break;

		case DIO_PORTC:
			TOGGLE_BIT(PORTC,Copy_u8PinNumber);
    12f2:	a5 e3       	ldi	r26, 0x35	; 53
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e3       	ldi	r30, 0x35	; 53
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8TogglePinValue+0xcc>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8TogglePinValue+0xc8>
    1314:	84 27       	eor	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	15 c0       	rjmp	.+42     	; 0x1344 <DIO_u8TogglePinValue+0x100>
			break;

		case DIO_PORTD:
			TOGGLE_BIT(PORTD,Copy_u8PinNumber);
    131a:	a2 e3       	ldi	r26, 0x32	; 50
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e2 e3       	ldi	r30, 0x32	; 50
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_u8TogglePinValue+0xf4>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_u8TogglePinValue+0xf0>
    133c:	84 27       	eor	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <DIO_u8TogglePinValue+0x100>
			break;
		default:
			Error_State =NOK;
    1342:	19 82       	std	Y+1, r1	; 0x01
		}
	}



	return Error_State;
    1344:	99 81       	ldd	r25, Y+1	; 0x01
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8e 81       	ldd	r24, Y+6	; 0x06


}
    134a:	26 96       	adiw	r28, 0x06	; 6
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8PortNumber , u8 Copy_u8PortDirection)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_u8SetPortDirection+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <DIO_u8SetPortDirection+0x8>
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_State = OK;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01


		switch (Copy_u8PortNumber)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3d 83       	std	Y+5, r19	; 0x05
    137a:	2c 83       	std	Y+4, r18	; 0x04
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	31 f1       	breq	.+76     	; 0x13d2 <DIO_u8SetPortDirection+0x76>
    1386:	2c 81       	ldd	r18, Y+4	; 0x04
    1388:	3d 81       	ldd	r19, Y+5	; 0x05
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <DIO_u8SetPortDirection+0x3e>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	61 f0       	breq	.+24     	; 0x13b0 <DIO_u8SetPortDirection+0x54>
    1398:	4f c0       	rjmp	.+158    	; 0x1438 <DIO_u8SetPortDirection+0xdc>
    139a:	2c 81       	ldd	r18, Y+4	; 0x04
    139c:	3d 81       	ldd	r19, Y+5	; 0x05
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	41 f1       	breq	.+80     	; 0x13f4 <DIO_u8SetPortDirection+0x98>
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	9d 81       	ldd	r25, Y+5	; 0x05
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	a1 f1       	breq	.+104    	; 0x1416 <DIO_u8SetPortDirection+0xba>
    13ae:	44 c0       	rjmp	.+136    	; 0x1438 <DIO_u8SetPortDirection+0xdc>
		{
		case DIO_PORTA:
			if(Copy_u8PortDirection==PORT_OUTPUT)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	8f 3f       	cpi	r24, 0xFF	; 255
    13b4:	29 f4       	brne	.+10     	; 0x13c0 <DIO_u8SetPortDirection+0x64>
			{
				DDRA = PORT_OUTPUT;
    13b6:	ea e3       	ldi	r30, 0x3A	; 58
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	80 83       	st	Z, r24
    13be:	3d c0       	rjmp	.+122    	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8PortDirection==PORT_INPUT)
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 23       	and	r24, r24
    13c4:	21 f4       	brne	.+8      	; 0x13ce <DIO_u8SetPortDirection+0x72>
			{
				DDRA = PORT_INPUT;
    13c6:	ea e3       	ldi	r30, 0x3A	; 58
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	10 82       	st	Z, r1
    13cc:	36 c0       	rjmp	.+108    	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    13ce:	19 82       	std	Y+1, r1	; 0x01
    13d0:	34 c0       	rjmp	.+104    	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			break;

		case DIO_PORTB:
			if(Copy_u8PortDirection==PORT_OUTPUT)
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	8f 3f       	cpi	r24, 0xFF	; 255
    13d6:	29 f4       	brne	.+10     	; 0x13e2 <DIO_u8SetPortDirection+0x86>
			{
				DDRB = PORT_OUTPUT;
    13d8:	e7 e3       	ldi	r30, 0x37	; 55
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	80 83       	st	Z, r24
    13e0:	2c c0       	rjmp	.+88     	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8PortDirection==PORT_INPUT)
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 23       	and	r24, r24
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <DIO_u8SetPortDirection+0x94>
			{
				DDRB = PORT_INPUT;
    13e8:	e7 e3       	ldi	r30, 0x37	; 55
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	10 82       	st	Z, r1
    13ee:	25 c0       	rjmp	.+74     	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    13f0:	19 82       	std	Y+1, r1	; 0x01
    13f2:	23 c0       	rjmp	.+70     	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			break;

		case DIO_PORTC:
			if(Copy_u8PortDirection==PORT_OUTPUT)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	8f 3f       	cpi	r24, 0xFF	; 255
    13f8:	29 f4       	brne	.+10     	; 0x1404 <DIO_u8SetPortDirection+0xa8>
			{
				DDRC = PORT_OUTPUT;
    13fa:	e4 e3       	ldi	r30, 0x34	; 52
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	80 83       	st	Z, r24
    1402:	1b c0       	rjmp	.+54     	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8PortDirection==PORT_INPUT)
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 23       	and	r24, r24
    1408:	21 f4       	brne	.+8      	; 0x1412 <DIO_u8SetPortDirection+0xb6>
			{
				DDRC = PORT_INPUT;
    140a:	e4 e3       	ldi	r30, 0x34	; 52
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	10 82       	st	Z, r1
    1410:	14 c0       	rjmp	.+40     	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    1412:	19 82       	std	Y+1, r1	; 0x01
    1414:	12 c0       	rjmp	.+36     	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			break;

		case DIO_PORTD:
			if(Copy_u8PortDirection==PORT_OUTPUT)
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	8f 3f       	cpi	r24, 0xFF	; 255
    141a:	29 f4       	brne	.+10     	; 0x1426 <DIO_u8SetPortDirection+0xca>
			{
				DDRD = PORT_OUTPUT;
    141c:	e1 e3       	ldi	r30, 0x31	; 49
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	80 83       	st	Z, r24
    1424:	0a c0       	rjmp	.+20     	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8PortDirection==PORT_INPUT)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 23       	and	r24, r24
    142a:	21 f4       	brne	.+8      	; 0x1434 <DIO_u8SetPortDirection+0xd8>
			{
				DDRD = PORT_INPUT;
    142c:	e1 e3       	ldi	r30, 0x31	; 49
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	10 82       	st	Z, r1
    1432:	03 c0       	rjmp	.+6      	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    1434:	19 82       	std	Y+1, r1	; 0x01
    1436:	01 c0       	rjmp	.+2      	; 0x143a <DIO_u8SetPortDirection+0xde>
			}
			break;
		default:
			Error_State =NOK;
    1438:	19 82       	std	Y+1, r1	; 0x01
		}




	return Error_State;
    143a:	89 81       	ldd	r24, Y+1	; 0x01


}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue	 (u8 Copy_u8PortNumber , u8 Copy_u8PortValue)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <DIO_u8SetPortValue+0x6>
    1452:	00 d0       	rcall	.+0      	; 0x1454 <DIO_u8SetPortValue+0x8>
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_State = OK;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01


		switch (Copy_u8PortNumber)
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	3d 83       	std	Y+5, r19	; 0x05
    146a:	2c 83       	std	Y+4, r18	; 0x04
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	91 05       	cpc	r25, r1
    1474:	31 f1       	breq	.+76     	; 0x14c2 <DIO_u8SetPortValue+0x76>
    1476:	2c 81       	ldd	r18, Y+4	; 0x04
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	2c f4       	brge	.+10     	; 0x148a <DIO_u8SetPortValue+0x3e>
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	61 f0       	breq	.+24     	; 0x14a0 <DIO_u8SetPortValue+0x54>
    1488:	4f c0       	rjmp	.+158    	; 0x1528 <DIO_u8SetPortValue+0xdc>
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	41 f1       	breq	.+80     	; 0x14e4 <DIO_u8SetPortValue+0x98>
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	91 05       	cpc	r25, r1
    149c:	a1 f1       	breq	.+104    	; 0x1506 <DIO_u8SetPortValue+0xba>
    149e:	44 c0       	rjmp	.+136    	; 0x1528 <DIO_u8SetPortValue+0xdc>
		{
		case DIO_PORTA:
			if(Copy_u8PortValue==PORT_HIGH)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	8f 3f       	cpi	r24, 0xFF	; 255
    14a4:	29 f4       	brne	.+10     	; 0x14b0 <DIO_u8SetPortValue+0x64>
			{
				PORTA = PORT_HIGH;
    14a6:	eb e3       	ldi	r30, 0x3B	; 59
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	80 83       	st	Z, r24
    14ae:	3d c0       	rjmp	.+122    	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			else if(Copy_u8PortValue==PORT_LOW)
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	88 23       	and	r24, r24
    14b4:	21 f4       	brne	.+8      	; 0x14be <DIO_u8SetPortValue+0x72>
			{
				PORTA = PORT_LOW;
    14b6:	eb e3       	ldi	r30, 0x3B	; 59
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	10 82       	st	Z, r1
    14bc:	36 c0       	rjmp	.+108    	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			else
			{
				Error_State = NOK;
    14be:	19 82       	std	Y+1, r1	; 0x01
    14c0:	34 c0       	rjmp	.+104    	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			break;

		case DIO_PORTB:
			if(Copy_u8PortValue==PORT_HIGH)
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	8f 3f       	cpi	r24, 0xFF	; 255
    14c6:	29 f4       	brne	.+10     	; 0x14d2 <DIO_u8SetPortValue+0x86>
			{
				PORTB = PORT_HIGH;
    14c8:	e8 e3       	ldi	r30, 0x38	; 56
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	80 83       	st	Z, r24
    14d0:	2c c0       	rjmp	.+88     	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			else if(Copy_u8PortValue==PORT_LOW)
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 23       	and	r24, r24
    14d6:	21 f4       	brne	.+8      	; 0x14e0 <DIO_u8SetPortValue+0x94>
			{
				PORTB = PORT_LOW;
    14d8:	e8 e3       	ldi	r30, 0x38	; 56
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	10 82       	st	Z, r1
    14de:	25 c0       	rjmp	.+74     	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			else
			{
				Error_State = NOK;
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	23 c0       	rjmp	.+70     	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			break;

		case DIO_PORTC:
			if(Copy_u8PortValue==PORT_HIGH)
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	8f 3f       	cpi	r24, 0xFF	; 255
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <DIO_u8SetPortValue+0xa8>
			{
				PORTC = PORT_HIGH;
    14ea:	e5 e3       	ldi	r30, 0x35	; 53
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	80 83       	st	Z, r24
    14f2:	1b c0       	rjmp	.+54     	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			else if(Copy_u8PortValue==PORT_LOW)
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	88 23       	and	r24, r24
    14f8:	21 f4       	brne	.+8      	; 0x1502 <DIO_u8SetPortValue+0xb6>
			{
				PORTC = PORT_LOW;
    14fa:	e5 e3       	ldi	r30, 0x35	; 53
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	10 82       	st	Z, r1
    1500:	14 c0       	rjmp	.+40     	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			else
			{
				Error_State = NOK;
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	12 c0       	rjmp	.+36     	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			break;

		case DIO_PORTD:
			if(Copy_u8PortValue==PORT_HIGH)
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	8f 3f       	cpi	r24, 0xFF	; 255
    150a:	29 f4       	brne	.+10     	; 0x1516 <DIO_u8SetPortValue+0xca>
			{
				PORTD = PORT_HIGH;
    150c:	e2 e3       	ldi	r30, 0x32	; 50
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	80 83       	st	Z, r24
    1514:	0a c0       	rjmp	.+20     	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			else if(Copy_u8PortValue==PORT_LOW)
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	88 23       	and	r24, r24
    151a:	21 f4       	brne	.+8      	; 0x1524 <DIO_u8SetPortValue+0xd8>
			{
				PORTD = PORT_LOW;
    151c:	e2 e3       	ldi	r30, 0x32	; 50
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	10 82       	st	Z, r1
    1522:	03 c0       	rjmp	.+6      	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			else
			{
				Error_State = NOK;
    1524:	19 82       	std	Y+1, r1	; 0x01
    1526:	01 c0       	rjmp	.+2      	; 0x152a <DIO_u8SetPortValue+0xde>
			}
			break;
		default:
			Error_State =NOK;
    1528:	19 82       	std	Y+1, r1	; 0x01
		}




	return Error_State;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <DIO_u8Set4MSB_BitsValue>:

void DIO_u8Set4MSB_BitsValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <DIO_u8Set4MSB_BitsValue+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <DIO_u8Set4MSB_BitsValue+0x8>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNumber)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	99 f1       	breq	.+102    	; 0x15c6 <DIO_u8Set4MSB_BitsValue+0x8a>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <DIO_u8Set4MSB_BitsValue+0x38>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	71 f0       	breq	.+28     	; 0x158e <DIO_u8Set4MSB_BitsValue+0x52>
    1572:	7c c0       	rjmp	.+248    	; 0x166c <DIO_u8Set4MSB_BitsValue+0x130>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	3c 81       	ldd	r19, Y+4	; 0x04
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	09 f4       	brne	.+2      	; 0x1580 <DIO_u8Set4MSB_BitsValue+0x44>
    157e:	3f c0       	rjmp	.+126    	; 0x15fe <DIO_u8Set4MSB_BitsValue+0xc2>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <DIO_u8Set4MSB_BitsValue+0x50>
    158a:	55 c0       	rjmp	.+170    	; 0x1636 <DIO_u8Set4MSB_BitsValue+0xfa>
    158c:	6f c0       	rjmp	.+222    	; 0x166c <DIO_u8Set4MSB_BitsValue+0x130>
	{
	case DIO_PORTA:
		PORTA&=0x0F;
    158e:	ab e3       	ldi	r26, 0x3B	; 59
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	eb e3       	ldi	r30, 0x3B	; 59
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	8f 70       	andi	r24, 0x0F	; 15
    159a:	8c 93       	st	X, r24
		Copy_u8PortValue&=0x0F;
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	8f 70       	andi	r24, 0x0F	; 15
    15a0:	8a 83       	std	Y+2, r24	; 0x02
		PORTA|=(Copy_u8PortValue<<4);
    15a2:	ab e3       	ldi	r26, 0x3B	; 59
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	28 2f       	mov	r18, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	82 95       	swap	r24
    15b6:	92 95       	swap	r25
    15b8:	90 7f       	andi	r25, 0xF0	; 240
    15ba:	98 27       	eor	r25, r24
    15bc:	80 7f       	andi	r24, 0xF0	; 240
    15be:	98 27       	eor	r25, r24
    15c0:	82 2b       	or	r24, r18
    15c2:	8c 93       	st	X, r24
    15c4:	53 c0       	rjmp	.+166    	; 0x166c <DIO_u8Set4MSB_BitsValue+0x130>
		break;
	case DIO_PORTB:
		PORTB&=0x0F;
    15c6:	a8 e3       	ldi	r26, 0x38	; 56
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e8 e3       	ldi	r30, 0x38	; 56
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 70       	andi	r24, 0x0F	; 15
    15d2:	8c 93       	st	X, r24
		Copy_u8PortValue&=0x0F;
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	8f 70       	andi	r24, 0x0F	; 15
    15d8:	8a 83       	std	Y+2, r24	; 0x02
		PORTB|=(Copy_u8PortValue<<4);
    15da:	a8 e3       	ldi	r26, 0x38	; 56
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e8 e3       	ldi	r30, 0x38	; 56
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	28 2f       	mov	r18, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	82 95       	swap	r24
    15ee:	92 95       	swap	r25
    15f0:	90 7f       	andi	r25, 0xF0	; 240
    15f2:	98 27       	eor	r25, r24
    15f4:	80 7f       	andi	r24, 0xF0	; 240
    15f6:	98 27       	eor	r25, r24
    15f8:	82 2b       	or	r24, r18
    15fa:	8c 93       	st	X, r24
    15fc:	37 c0       	rjmp	.+110    	; 0x166c <DIO_u8Set4MSB_BitsValue+0x130>
		break;
	case DIO_PORTC:
		PORTC&=0x0F;
    15fe:	a5 e3       	ldi	r26, 0x35	; 53
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8f 70       	andi	r24, 0x0F	; 15
    160a:	8c 93       	st	X, r24
		Copy_u8PortValue&=0x0F;
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	8f 70       	andi	r24, 0x0F	; 15
    1610:	8a 83       	std	Y+2, r24	; 0x02
		PORTC|=(Copy_u8PortValue<<4);
    1612:	a5 e3       	ldi	r26, 0x35	; 53
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e3       	ldi	r30, 0x35	; 53
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	82 95       	swap	r24
    1626:	92 95       	swap	r25
    1628:	90 7f       	andi	r25, 0xF0	; 240
    162a:	98 27       	eor	r25, r24
    162c:	80 7f       	andi	r24, 0xF0	; 240
    162e:	98 27       	eor	r25, r24
    1630:	82 2b       	or	r24, r18
    1632:	8c 93       	st	X, r24
    1634:	1b c0       	rjmp	.+54     	; 0x166c <DIO_u8Set4MSB_BitsValue+0x130>
		break;
	case DIO_PORTD:
		PORTD&=0x0F;
    1636:	a2 e3       	ldi	r26, 0x32	; 50
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e2 e3       	ldi	r30, 0x32	; 50
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	8f 70       	andi	r24, 0x0F	; 15
    1642:	8c 93       	st	X, r24
		Copy_u8PortValue&=0x0F;
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	8f 70       	andi	r24, 0x0F	; 15
    1648:	8a 83       	std	Y+2, r24	; 0x02
		PORTD|=(Copy_u8PortValue<<4);
    164a:	a2 e3       	ldi	r26, 0x32	; 50
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e2 e3       	ldi	r30, 0x32	; 50
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	28 2f       	mov	r18, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	82 95       	swap	r24
    165e:	92 95       	swap	r25
    1660:	90 7f       	andi	r25, 0xF0	; 240
    1662:	98 27       	eor	r25, r24
    1664:	80 7f       	andi	r24, 0xF0	; 240
    1666:	98 27       	eor	r25, r24
    1668:	82 2b       	or	r24, r18
    166a:	8c 93       	st	X, r24
		break;
	}
}
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <EEPROM_write>:
#include<util/delay.h>

void EEPROM_write(u16 u16_Address, u8 u8_Data)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    167a:	e1 99       	sbic	0x1c, 1	; 28
    167c:	fe cf       	rjmp	.-4      	; 0x167a <EEPROM_write>
	/* Set up address and data registers */
	EEAR = u16_Address;
    167e:	9f bb       	out	0x1f, r25	; 31
    1680:	8e bb       	out	0x1e, r24	; 30
	EEDR = u8_Data;
    1682:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
    1684:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start EEprom write by setting EEWE */
	EECR |= (1<<EEWE);
    1686:	e1 9a       	sbi	0x1c, 1	; 28
}
    1688:	08 95       	ret

0000168a <EEPROM_read>:

u8 EEPROM_read(u16 u16_Address)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    168a:	e1 99       	sbic	0x1c, 1	; 28
    168c:	fe cf       	rjmp	.-4      	; 0x168a <EEPROM_read>
	/* Set up address register */
	EEAR = u16_Address;
    168e:	9f bb       	out	0x1f, r25	; 31
    1690:	8e bb       	out	0x1e, r24	; 30
	/* Start EEprom read by writing EERE */
	EECR |= (1<<EERE);
    1692:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1694:	8d b3       	in	r24, 0x1d	; 29
}
    1696:	08 95       	ret

00001698 <EXTI_voidINT0_Init>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"EXTI_Private.h"

void EXTI_voidINT0_Init(void)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	/*select Sense Control (Falling edge)*/
	SET_BIT(MCUCR,1);
    16a0:	a5 e5       	ldi	r26, 0x55	; 85
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e5 e5       	ldi	r30, 0x55	; 85
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	82 60       	ori	r24, 0x02	; 2
    16ac:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
    16ae:	a5 e5       	ldi	r26, 0x55	; 85
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e5       	ldi	r30, 0x55	; 85
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	8e 7f       	andi	r24, 0xFE	; 254
    16ba:	8c 93       	st	X, r24
	/*Enable PIE INT0*/
	SET_BIT(GICR,6);
    16bc:	ab e5       	ldi	r26, 0x5B	; 91
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	eb e5       	ldi	r30, 0x5B	; 91
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	80 64       	ori	r24, 0x40	; 64
    16c8:	8c 93       	st	X, r24
}
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <EXTI_voidINT1_Init>:
void EXTI_voidINT1_Init(void)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
	/*select Sense Control (Rasing edge)*/
	SET_BIT(MCUCR,2);
    16d8:	a5 e5       	ldi	r26, 0x55	; 85
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e5       	ldi	r30, 0x55	; 85
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	84 60       	ori	r24, 0x04	; 4
    16e4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,3);
    16e6:	a5 e5       	ldi	r26, 0x55	; 85
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e5       	ldi	r30, 0x55	; 85
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	87 7f       	andi	r24, 0xF7	; 247
    16f2:	8c 93       	st	X, r24
	/*Enable PIE INT1*/
	SET_BIT(GICR,7);
    16f4:	ab e5       	ldi	r26, 0x5B	; 91
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	eb e5       	ldi	r30, 0x5B	; 91
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 68       	ori	r24, 0x80	; 128
    1700:	8c 93       	st	X, r24
}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <EXTI_voidINT2_Init>:

void EXTI_voidINT2_Init(void)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
	/*select Sense Control (Falling edge)*/
	CLR_BIT(MCUCSR,6);
    1710:	a4 e5       	ldi	r26, 0x54	; 84
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e4 e5       	ldi	r30, 0x54	; 84
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	8f 7b       	andi	r24, 0xBF	; 191
    171c:	8c 93       	st	X, r24
	/*Enable PIE INT2*/
	SET_BIT(GICR,5);
    171e:	ab e5       	ldi	r26, 0x5B	; 91
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e5       	ldi	r30, 0x5B	; 91
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 62       	ori	r24, 0x20	; 32
    172a:	8c 93       	st	X, r24
}
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <GIE_voidEnable>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"GIE_Private.h"

void GIE_voidEnable(void)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global interrupt */
	SET_BIT(SREG,7);
    173a:	af e5       	ldi	r26, 0x5F	; 95
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	ef e5       	ldi	r30, 0x5F	; 95
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	80 68       	ori	r24, 0x80	; 128
    1746:	8c 93       	st	X, r24
}
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
	/*Disable Global interrupt */
	CLR_BIT(SREG,7);
    1756:	af e5       	ldi	r26, 0x5F	; 95
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	ef e5       	ldi	r30, 0x5F	; 95
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8f 77       	andi	r24, 0x7F	; 127
    1762:	8c 93       	st	X, r24
}
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <_7_SEGMENT_INIT>:
#include"DIO_I.h"
#include<util/delay.h>


void _7_SEGMENT_INIT(void)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62

	/*Initialization 7_Segment*/
	DIO_u8SetPinDirection(DIO_PIN4,DIO_PORTA,PIN_OUTPUT);
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN5,DIO_PORTA,PIN_OUTPUT);
    177c:	85 e0       	ldi	r24, 0x05	; 5
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN6,DIO_PORTA,PIN_OUTPUT);
    1786:	86 e0       	ldi	r24, 0x06	; 6
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	41 e0       	ldi	r20, 0x01	; 1
    178c:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN7,DIO_PORTA,PIN_OUTPUT);
    1790:	87 e0       	ldi	r24, 0x07	; 7
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>

	/*(Enable_1)E1  7_Segment*/
	DIO_u8SetPinDirection(DIO_PIN1,DIO_PORTB,PIN_OUTPUT);
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>

	/*(Enable_2)E2  7_Segment*/
	DIO_u8SetPinDirection(DIO_PIN3,DIO_PORTB,PIN_OUTPUT);
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>

}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <_7_SEGMENT_READ>:

void _7_SEGMENT_READ(u8 Data)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	a0 97       	sbiw	r28, 0x20	; 32
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	88 a3       	std	Y+32, r24	; 0x20

	/*Divide the Data to show on E1 and E2 7_Segment*/
	u8 ten = Data/10;
    17ca:	88 a1       	ldd	r24, Y+32	; 0x20
    17cc:	9a e0       	ldi	r25, 0x0A	; 10
    17ce:	69 2f       	mov	r22, r25
    17d0:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__udivmodqi4>
    17d4:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 one = Data%10;
    17d6:	88 a1       	ldd	r24, Y+32	; 0x20
    17d8:	9a e0       	ldi	r25, 0x0A	; 10
    17da:	69 2f       	mov	r22, r25
    17dc:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__udivmodqi4>
    17e0:	89 2f       	mov	r24, r25
    17e2:	8e 8f       	std	Y+30, r24	; 0x1e

	for(u8 i=0;i<2;i++)
    17e4:	1d 8e       	std	Y+29, r1	; 0x1d
    17e6:	08 c1       	rjmp	.+528    	; 0x19f8 <_7_SEGMENT_READ+0x244>
	{

		if(i==0)
    17e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ea:	88 23       	and	r24, r24
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <_7_SEGMENT_READ+0x3c>
    17ee:	81 c0       	rjmp	.+258    	; 0x18f2 <_7_SEGMENT_READ+0x13e>
		{
			/*Show The Data on E2 7_Segment*/
			DIO_u8SetPinValue(DIO_PIN3,DIO_PORTB,PIN_HIGH);
    17f0:	83 e0       	ldi	r24, 0x03	; 3
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
			DIO_u8Set4MSB_BitsValue(DIO_PORTA,one);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    17fe:	0e 94 9e 0a 	call	0x153c	; 0x153c <DIO_u8Set4MSB_BitsValue>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 ea       	ldi	r26, 0xA0	; 160
    1808:	b0 e4       	ldi	r27, 0x40	; 64
    180a:	89 8f       	std	Y+25, r24	; 0x19
    180c:	9a 8f       	std	Y+26, r25	; 0x1a
    180e:	ab 8f       	std	Y+27, r26	; 0x1b
    1810:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	69 8d       	ldd	r22, Y+25	; 0x19
    1814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a e7       	ldi	r20, 0x7A	; 122
    1820:	55 e4       	ldi	r21, 0x45	; 69
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8d 8b       	std	Y+21, r24	; 0x15
    182c:	9e 8b       	std	Y+22, r25	; 0x16
    182e:	af 8b       	std	Y+23, r26	; 0x17
    1830:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1832:	6d 89       	ldd	r22, Y+21	; 0x15
    1834:	7e 89       	ldd	r23, Y+22	; 0x16
    1836:	8f 89       	ldd	r24, Y+23	; 0x17
    1838:	98 8d       	ldd	r25, Y+24	; 0x18
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <_7_SEGMENT_READ+0xa0>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	8b 8b       	std	Y+19, r24	; 0x13
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <_7_SEGMENT_READ+0x11e>
	else if (__tmp > 65535)
    1854:	6d 89       	ldd	r22, Y+21	; 0x15
    1856:	7e 89       	ldd	r23, Y+22	; 0x16
    1858:	8f 89       	ldd	r24, Y+23	; 0x17
    185a:	98 8d       	ldd	r25, Y+24	; 0x18
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <_7_SEGMENT_READ+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	69 8d       	ldd	r22, Y+25	; 0x19
    186e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9c 8b       	std	Y+20, r25	; 0x14
    1892:	8b 8b       	std	Y+19, r24	; 0x13
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <_7_SEGMENT_READ+0x100>
    1896:	80 e9       	ldi	r24, 0x90	; 144
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	9a 8b       	std	Y+18, r25	; 0x12
    189c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    189e:	89 89       	ldd	r24, Y+17	; 0x11
    18a0:	9a 89       	ldd	r25, Y+18	; 0x12
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <_7_SEGMENT_READ+0xee>
    18a6:	9a 8b       	std	Y+18, r25	; 0x12
    18a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	9c 8b       	std	Y+20, r25	; 0x14
    18b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8b 89       	ldd	r24, Y+19	; 0x13
    18b6:	9c 89       	ldd	r25, Y+20	; 0x14
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <_7_SEGMENT_READ+0xe2>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <_7_SEGMENT_READ+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	6d 89       	ldd	r22, Y+21	; 0x15
    18c0:	7e 89       	ldd	r23, Y+22	; 0x16
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9c 8b       	std	Y+20, r25	; 0x14
    18d0:	8b 8b       	std	Y+19, r24	; 0x13
    18d2:	8b 89       	ldd	r24, Y+19	; 0x13
    18d4:	9c 89       	ldd	r25, Y+20	; 0x14
    18d6:	98 8b       	std	Y+16, r25	; 0x10
    18d8:	8f 87       	std	Y+15, r24	; 0x0f
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <_7_SEGMENT_READ+0x12a>
    18e2:	98 8b       	std	Y+16, r25	; 0x10
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);
			DIO_u8SetPinValue(DIO_PIN3,DIO_PORTB,PIN_LOW);
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
    18f0:	80 c0       	rjmp	.+256    	; 0x19f2 <_7_SEGMENT_READ+0x23e>
		}
		else
		{
			/*Show The Data on E1 7_Segment*/
			DIO_u8SetPinValue(DIO_PIN1,DIO_PORTB,PIN_HIGH);
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	61 e0       	ldi	r22, 0x01	; 1
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
			DIO_u8Set4MSB_BitsValue(DIO_PORTA,ten);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1900:	0e 94 9e 0a 	call	0x153c	; 0x153c <DIO_u8Set4MSB_BitsValue>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 ea       	ldi	r26, 0xA0	; 160
    190a:	b0 e4       	ldi	r27, 0x40	; 64
    190c:	8b 87       	std	Y+11, r24	; 0x0b
    190e:	9c 87       	std	Y+12, r25	; 0x0c
    1910:	ad 87       	std	Y+13, r26	; 0x0d
    1912:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	6b 85       	ldd	r22, Y+11	; 0x0b
    1916:	7c 85       	ldd	r23, Y+12	; 0x0c
    1918:	8d 85       	ldd	r24, Y+13	; 0x0d
    191a:	9e 85       	ldd	r25, Y+14	; 0x0e
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a e7       	ldi	r20, 0x7A	; 122
    1922:	55 e4       	ldi	r21, 0x45	; 69
    1924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8f 83       	std	Y+7, r24	; 0x07
    192e:	98 87       	std	Y+8, r25	; 0x08
    1930:	a9 87       	std	Y+9, r26	; 0x09
    1932:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1934:	6f 81       	ldd	r22, Y+7	; 0x07
    1936:	78 85       	ldd	r23, Y+8	; 0x08
    1938:	89 85       	ldd	r24, Y+9	; 0x09
    193a:	9a 85       	ldd	r25, Y+10	; 0x0a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <_7_SEGMENT_READ+0x1a2>
		__ticks = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <_7_SEGMENT_READ+0x220>
	else if (__tmp > 65535)
    1956:	6f 81       	ldd	r22, Y+7	; 0x07
    1958:	78 85       	ldd	r23, Y+8	; 0x08
    195a:	89 85       	ldd	r24, Y+9	; 0x09
    195c:	9a 85       	ldd	r25, Y+10	; 0x0a
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <_7_SEGMENT_READ+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1970:	7c 85       	ldd	r23, Y+12	; 0x0c
    1972:	8d 85       	ldd	r24, Y+13	; 0x0d
    1974:	9e 85       	ldd	r25, Y+14	; 0x0e
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <_7_SEGMENT_READ+0x202>
    1998:	80 e9       	ldi	r24, 0x90	; 144
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	9c 83       	std	Y+4, r25	; 0x04
    199e:	8b 83       	std	Y+3, r24	; 0x03
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <_7_SEGMENT_READ+0x1f0>
    19a8:	9c 83       	std	Y+4, r25	; 0x04
    19aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <_7_SEGMENT_READ+0x1e4>
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <_7_SEGMENT_READ+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	6f 81       	ldd	r22, Y+7	; 0x07
    19c2:	78 85       	ldd	r23, Y+8	; 0x08
    19c4:	89 85       	ldd	r24, Y+9	; 0x09
    19c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
    19d6:	9e 81       	ldd	r25, Y+6	; 0x06
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <_7_SEGMENT_READ+0x22c>
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5);
			DIO_u8SetPinValue(DIO_PIN1,DIO_PORTB,PIN_LOW);
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	61 e0       	ldi	r22, 0x01	; 1
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>

	/*Divide the Data to show on E1 and E2 7_Segment*/
	u8 ten = Data/10;
	u8 one = Data%10;

	for(u8 i=0;i<2;i++)
    19f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19f4:	8f 5f       	subi	r24, 0xFF	; 255
    19f6:	8d 8f       	std	Y+29, r24	; 0x1d
    19f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19fa:	82 30       	cpi	r24, 0x02	; 2
    19fc:	08 f4       	brcc	.+2      	; 0x1a00 <_7_SEGMENT_READ+0x24c>
    19fe:	f4 ce       	rjmp	.-536    	; 0x17e8 <_7_SEGMENT_READ+0x34>
			DIO_u8SetPinValue(DIO_PIN1,DIO_PORTB,PIN_LOW);
		}

	}

}
    1a00:	a0 96       	adiw	r28, 0x20	; 32
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <TIMER2_voidInit>:
#include"BIT_MATH.h"
#include"TIMER2_Private.h"
#include"TIMER2_Config.h"

void TIMER2_voidInit(void)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR2,3);
	SET_BIT(TCCR2,6);

#elif TIMER2_MODE==TIMER2_PWM_FAST_MODE
	/*Set CTC Timer mode*/
	SET_BIT(TCCR2,3);
    1a1a:	a5 e4       	ldi	r26, 0x45	; 69
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e5 e4       	ldi	r30, 0x45	; 69
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	88 60       	ori	r24, 0x08	; 8
    1a26:	8c 93       	st	X, r24
	SET_BIT(TCCR2,6);
    1a28:	a5 e4       	ldi	r26, 0x45	; 69
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e5 e4       	ldi	r30, 0x45	; 69
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 64       	ori	r24, 0x40	; 64
    1a34:	8c 93       	st	X, r24
#else
	#error"You have error in set TIMER2 MODE"
#endif
	/*Set Prescaler*/
	TCCR2&=TIMER2_BITMASK_PRESCALER;
    1a36:	a5 e4       	ldi	r26, 0x45	; 69
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e5 e4       	ldi	r30, 0x45	; 69
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	88 7f       	andi	r24, 0xF8	; 248
    1a42:	8c 93       	st	X, r24
	TCCR2|=TIMER2_PRESCALER;
    1a44:	a5 e4       	ldi	r26, 0x45	; 69
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e5 e4       	ldi	r30, 0x45	; 69
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	85 60       	ori	r24, 0x05	; 5
    1a50:	8c 93       	st	X, r24
}
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <TIMER2_voidSetPreloadValue>:
void TIMER2_voidSetPreloadValue(u8 Copy_u8Preload)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	0f 92       	push	r0
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Preload;
    1a64:	e4 e4       	ldi	r30, 0x44	; 68
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	80 83       	st	Z, r24
}
    1a6c:	0f 90       	pop	r0
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <ADC_Temperature>:
u8 LED_Flag = 0;
u8 LED_Count = 0;

u16 ADC_Temperature()

{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	27 97       	sbiw	r28, 0x07	; 7
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
	u16 ADC_Digital;
	u16 ADC_Analog ;
	unsigned int average = 0;
    1a88:	1b 82       	std	Y+3, r1	; 0x03
    1a8a:	1a 82       	std	Y+2, r1	; 0x02
	static unsigned char i = 0;
	static unsigned int Temperatuer_Value[10]={0};
	ADC_Digital=ADC_u16StartConversion(0);
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u16StartConversion>
    1a92:	9f 83       	std	Y+7, r25	; 0x07
    1a94:	8e 83       	std	Y+6, r24	; 0x06
	ADC_Analog = (ADC_Digital*5000UL) /1024;
    1a96:	8e 81       	ldd	r24, Y+6	; 0x06
    1a98:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9a:	cc 01       	movw	r24, r24
    1a9c:	a0 e0       	ldi	r26, 0x00	; 0
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	28 e8       	ldi	r18, 0x88	; 136
    1aa2:	33 e1       	ldi	r19, 0x13	; 19
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__mulsi3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	07 2e       	mov	r0, r23
    1ab6:	7a e0       	ldi	r23, 0x0A	; 10
    1ab8:	b6 95       	lsr	r27
    1aba:	a7 95       	ror	r26
    1abc:	97 95       	ror	r25
    1abe:	87 95       	ror	r24
    1ac0:	7a 95       	dec	r23
    1ac2:	d1 f7       	brne	.-12     	; 0x1ab8 <ADC_Temperature+0x44>
    1ac4:	70 2d       	mov	r23, r0
    1ac6:	9d 83       	std	Y+5, r25	; 0x05
    1ac8:	8c 83       	std	Y+4, r24	; 0x04
	ADC_Analog/=10;
    1aca:	8c 81       	ldd	r24, Y+4	; 0x04
    1acc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ace:	2a e0       	ldi	r18, 0x0A	; 10
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	b9 01       	movw	r22, r18
    1ad4:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__udivmodhi4>
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9d 83       	std	Y+5, r25	; 0x05
    1adc:	8c 83       	std	Y+4, r24	; 0x04
	Temperatuer_Value[i]=ADC_Analog;
    1ade:	80 91 89 00 	lds	r24, 0x0089
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	fc 01       	movw	r30, r24
    1aec:	eb 58       	subi	r30, 0x8B	; 139
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	9d 81       	ldd	r25, Y+5	; 0x05
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	80 83       	st	Z, r24
	if(i==9)
    1af8:	80 91 89 00 	lds	r24, 0x0089
    1afc:	89 30       	cpi	r24, 0x09	; 9
    1afe:	19 f4       	brne	.+6      	; 0x1b06 <ADC_Temperature+0x92>
	{
		i=0;
    1b00:	10 92 89 00 	sts	0x0089, r1
    1b04:	05 c0       	rjmp	.+10     	; 0x1b10 <ADC_Temperature+0x9c>
	}
	else
	{
		i++;
    1b06:	80 91 89 00 	lds	r24, 0x0089
    1b0a:	8f 5f       	subi	r24, 0xFF	; 255
    1b0c:	80 93 89 00 	sts	0x0089, r24
	}
	for(unsigned char j=0 ; j<10 ; j++)
    1b10:	19 82       	std	Y+1, r1	; 0x01
    1b12:	13 c0       	rjmp	.+38     	; 0x1b3a <ADC_Temperature+0xc6>
	{
		average+=Temperatuer_Value[j];
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	fc 01       	movw	r30, r24
    1b20:	eb 58       	subi	r30, 0x8B	; 139
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	20 81       	ld	r18, Z
    1b26:	31 81       	ldd	r19, Z+1	; 0x01
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2c:	82 0f       	add	r24, r18
    1b2e:	93 1f       	adc	r25, r19
    1b30:	9b 83       	std	Y+3, r25	; 0x03
    1b32:	8a 83       	std	Y+2, r24	; 0x02
	}
	else
	{
		i++;
	}
	for(unsigned char j=0 ; j<10 ; j++)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	8a 30       	cpi	r24, 0x0A	; 10
    1b3e:	50 f3       	brcs	.-44     	; 0x1b14 <ADC_Temperature+0xa0>
	{
		average+=Temperatuer_Value[j];
	}
	average/=10;
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	9b 81       	ldd	r25, Y+3	; 0x03
    1b44:	2a e0       	ldi	r18, 0x0A	; 10
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	b9 01       	movw	r22, r18
    1b4a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__udivmodhi4>
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9b 83       	std	Y+3, r25	; 0x03
    1b52:	8a 83       	std	Y+2, r24	; 0x02

	return average;
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1b58:	27 96       	adiw	r28, 0x07	; 7
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <main>:


int main(void)

{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	0f 92       	push	r0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
	/* Bottom of Turn */
	DIO_u8SetPinDirection(DIO_PIN2,DIO_PORTD,PIN_INPUT);
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	63 e0       	ldi	r22, 0x03	; 3
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_PIN2,DIO_PORTD,PIN_HIGH);
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	63 e0       	ldi	r22, 0x03	; 3
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
	/* Bottom of Heater (UP) */
	DIO_u8SetPinDirection(DIO_PIN3,DIO_PORTD,PIN_INPUT);
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	63 e0       	ldi	r22, 0x03	; 3
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_PIN3,DIO_PORTD,PIN_HIGH);
    1b92:	83 e0       	ldi	r24, 0x03	; 3
    1b94:	63 e0       	ldi	r22, 0x03	; 3
    1b96:	41 e0       	ldi	r20, 0x01	; 1
    1b98:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
	/* Bottom of Cooler (DOWN)*/
	DIO_u8SetPinDirection(DIO_PIN2,DIO_PORTB,PIN_INPUT);
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_PIN2,DIO_PORTB,PIN_HIGH);
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	41 e0       	ldi	r20, 0x01	; 1
    1bac:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(DIO_PIN1,DIO_PORTC,PIN_OUTPUT);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN3,DIO_PORTC,PIN_OUTPUT);
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	62 e0       	ldi	r22, 0x02	; 2
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PIN4,DIO_PORTC,PIN_OUTPUT);
    1bc4:	84 e0       	ldi	r24, 0x04	; 4
    1bc6:	62 e0       	ldi	r22, 0x02	; 2
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>

	/* Record of EEPROM */
	u8 SET_TEMP=0;
    1bce:	19 82       	std	Y+1, r1	; 0x01
	SET_TEMP=EEPROM_read(0);
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 45 0b 	call	0x168a	; 0x168a <EEPROM_read>
    1bd8:	89 83       	std	Y+1, r24	; 0x01
	if(SET_TEMP!=0xFF)
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bde:	39 f0       	breq	.+14     	; 0x1bee <main+0x84>
	{
		Temperature=SET_TEMP;
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	90 93 6e 00 	sts	0x006E, r25
    1bea:	80 93 6d 00 	sts	0x006D, r24
	}

	ADC_voidInit();
    1bee:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	_7_SEGMENT_INIT();
    1bf2:	0e 94 b5 0b 	call	0x176a	; 0x176a <_7_SEGMENT_INIT>

	EXTI_voidINT0_Init();
    1bf6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <EXTI_voidINT0_Init>
	EXTI_voidINT1_Init();
    1bfa:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EXTI_voidINT1_Init>
	EXTI_voidINT2_Init();
    1bfe:	0e 94 84 0b 	call	0x1708	; 0x1708 <EXTI_voidINT2_Init>

	TIMER0_voidInit();
    1c02:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <TIMER0_voidInit>
	TIMER2_voidInit();
    1c06:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <TIMER2_voidInit>

	GIE_voidEnable();
    1c0a:	0e 94 99 0b 	call	0x1732	; 0x1732 <GIE_voidEnable>

	TIMER0_voidSetPreloadValue(TIMER0_PRELOAD);
    1c0e:	84 ed       	ldi	r24, 0xD4	; 212
    1c10:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <TIMER0_voidSetPreloadValue>
	TIMER2_voidSetPreloadValue(TIMER2_PRELOAD);
    1c14:	84 ed       	ldi	r24, 0xD4	; 212
    1c16:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <TIMER2_voidSetPreloadValue>

	while (1)
	{
		if(Turn_Bottom==0)
    1c1a:	80 91 6a 00 	lds	r24, 0x006A
    1c1e:	88 23       	and	r24, r24
    1c20:	d1 f4       	brne	.+52     	; 0x1c56 <main+0xec>
		{
			/* Turn off Display */
			DIO_u8SetPinValue(DIO_PIN4,DIO_PORTC,PIN_LOW);
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	62 e0       	ldi	r22, 0x02	; 2
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_PIN3,DIO_PORTC,PIN_LOW);
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
    1c2e:	62 e0       	ldi	r22, 0x02	; 2
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_PIN1,DIO_PORTC,PIN_LOW);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
			/* Turn of 7_Segment */
			DIO_u8SetPinValue(DIO_PIN1,DIO_PORTB,PIN_LOW);
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	61 e0       	ldi	r22, 0x01	; 1
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_PIN3,DIO_PORTB,PIN_LOW);
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
    1c54:	e2 cf       	rjmp	.-60     	; 0x1c1a <main+0xb0>
		}
		else
		{
			if(Tnterrupt_Flag>5)
    1c56:	80 91 69 00 	lds	r24, 0x0069
    1c5a:	86 30       	cpi	r24, 0x06	; 6
    1c5c:	08 f4       	brcc	.+2      	; 0x1c60 <main+0xf6>
    1c5e:	41 c0       	rjmp	.+130    	; 0x1ce2 <main+0x178>
			{
				DIO_u8SetPinValue(DIO_PIN4,DIO_PORTC,PIN_LOW);
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	62 e0       	ldi	r22, 0x02	; 2
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_PIN3,DIO_PORTC,PIN_LOW);
    1c6a:	83 e0       	ldi	r24, 0x03	; 3
    1c6c:	62 e0       	ldi	r22, 0x02	; 2
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_PIN1,DIO_PORTC,PIN_LOW);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	62 e0       	ldi	r22, 0x02	; 2
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>

				if(LED_Flag == 0)
    1c7e:	80 91 73 00 	lds	r24, 0x0073
    1c82:	88 23       	and	r24, r24
    1c84:	21 f4       	brne	.+8      	; 0x1c8e <main+0x124>
				{

					_7_SEGMENT_READ(SET_Temperature);
    1c86:	80 91 68 00 	lds	r24, 0x0068
    1c8a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_7_SEGMENT_READ>
				else
				{
					/* Nothing */
				}

				if(Tnterrupt_Flag>6)
    1c8e:	80 91 69 00 	lds	r24, 0x0069
    1c92:	87 30       	cpi	r24, 0x07	; 7
    1c94:	10 f2       	brcs	.-124    	; 0x1c1a <main+0xb0>
				{

					/*BOTTOM 2 (UP_Heater_Bottom)*/
					if(UP_Heater_Bottom==1 )
    1c96:	80 91 6b 00 	lds	r24, 0x006B
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	59 f4       	brne	.+22     	; 0x1cb4 <main+0x14a>
					{
						if (SET_Temperature!=75)
    1c9e:	80 91 68 00 	lds	r24, 0x0068
    1ca2:	8b 34       	cpi	r24, 0x4B	; 75
    1ca4:	29 f0       	breq	.+10     	; 0x1cb0 <main+0x146>
						{
							SET_Temperature+=5;
    1ca6:	80 91 68 00 	lds	r24, 0x0068
    1caa:	8b 5f       	subi	r24, 0xFB	; 251
    1cac:	80 93 68 00 	sts	0x0068, r24
						}
						UP_Heater_Bottom=0;
    1cb0:	10 92 6b 00 	sts	0x006B, r1
					}
					/*BOTTOM 3 (DOWN_Heater_Bottom)*/
					if (DOWN_Cooling_Bottom==1)
    1cb4:	80 91 6c 00 	lds	r24, 0x006C
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	59 f4       	brne	.+22     	; 0x1cd2 <main+0x168>
					{
						if(SET_Temperature!=35)
    1cbc:	80 91 68 00 	lds	r24, 0x0068
    1cc0:	83 32       	cpi	r24, 0x23	; 35
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <main+0x164>
						{
							SET_Temperature-=5;
    1cc4:	80 91 68 00 	lds	r24, 0x0068
    1cc8:	85 50       	subi	r24, 0x05	; 5
    1cca:	80 93 68 00 	sts	0x0068, r24
						}
						DOWN_Cooling_Bottom=0;
    1cce:	10 92 6c 00 	sts	0x006C, r1
					}
					EEPROM_write(0,SET_Temperature);
    1cd2:	20 91 68 00 	lds	r18, 0x0068
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	62 2f       	mov	r22, r18
    1cdc:	0e 94 3d 0b 	call	0x167a	; 0x167a <EEPROM_write>
    1ce0:	9c cf       	rjmp	.-200    	; 0x1c1a <main+0xb0>
				}
			}
			else
			{
				Tnterrupt_Flag = 5;
    1ce2:	85 e0       	ldi	r24, 0x05	; 5
    1ce4:	80 93 69 00 	sts	0x0069, r24
				Seven_Segment_Flag = 0;
    1ce8:	10 92 6f 00 	sts	0x006F, r1
    1cec:	10 92 70 00 	sts	0x0070, r1
    1cf0:	10 92 71 00 	sts	0x0071, r1
    1cf4:	10 92 72 00 	sts	0x0072, r1
				Temperature = ADC_Temperature();
    1cf8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <ADC_Temperature>
    1cfc:	90 93 6e 00 	sts	0x006E, r25
    1d00:	80 93 6d 00 	sts	0x006D, r24
				_7_SEGMENT_READ(Temperature);
    1d04:	80 91 6d 00 	lds	r24, 0x006D
    1d08:	90 91 6e 00 	lds	r25, 0x006E
    1d0c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <_7_SEGMENT_READ>

				if (SET_Temperature<=(Temperature-5))
    1d10:	80 91 68 00 	lds	r24, 0x0068
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	80 91 6d 00 	lds	r24, 0x006D
    1d1c:	90 91 6e 00 	lds	r25, 0x006E
    1d20:	05 97       	sbiw	r24, 0x05	; 5
    1d22:	82 17       	cp	r24, r18
    1d24:	93 07       	cpc	r25, r19
    1d26:	78 f0       	brcs	.+30     	; 0x1d46 <main+0x1dc>
				{

					DIO_u8SetPinValue(DIO_PIN4,DIO_PORTC,PIN_LOW);
    1d28:	84 e0       	ldi	r24, 0x04	; 4
    1d2a:	62 e0       	ldi	r22, 0x02	; 2
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_PIN3,DIO_PORTC,PIN_HIGH);
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	62 e0       	ldi	r22, 0x02	; 2
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_PIN1,DIO_PORTC,PIN_HIGH);
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	62 e0       	ldi	r22, 0x02	; 2
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
				}
				if (SET_Temperature>=(Temperature+5))
    1d46:	80 91 68 00 	lds	r24, 0x0068
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	80 91 6d 00 	lds	r24, 0x006D
    1d52:	90 91 6e 00 	lds	r25, 0x006E
    1d56:	05 96       	adiw	r24, 0x05	; 5
    1d58:	28 17       	cp	r18, r24
    1d5a:	39 07       	cpc	r19, r25
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <main+0x1f6>
    1d5e:	5d cf       	rjmp	.-326    	; 0x1c1a <main+0xb0>
				{
					DIO_u8SetPinValue(DIO_PIN3,DIO_PORTC,PIN_LOW);
    1d60:	83 e0       	ldi	r24, 0x03	; 3
    1d62:	62 e0       	ldi	r22, 0x02	; 2
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_PIN4,DIO_PORTC,PIN_HIGH);
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	62 e0       	ldi	r22, 0x02	; 2
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>

					if(LED_Flag==0)
    1d74:	80 91 73 00 	lds	r24, 0x0073
    1d78:	88 23       	and	r24, r24
    1d7a:	31 f4       	brne	.+12     	; 0x1d88 <main+0x21e>
					{
						DIO_u8SetPinValue(DIO_PIN1,DIO_PORTC,PIN_HIGH);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
    1d86:	49 cf       	rjmp	.-366    	; 0x1c1a <main+0xb0>
					}
					else
					{
						DIO_u8SetPinValue(DIO_PIN1,DIO_PORTC,PIN_LOW);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_u8SetPinValue>
    1d92:	43 cf       	rjmp	.-378    	; 0x1c1a <main+0xb0>

00001d94 <__vector_1>:
	}
}

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1d94:	1f 92       	push	r1
    1d96:	0f 92       	push	r0
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	0f 92       	push	r0
    1d9c:	11 24       	eor	r1, r1
    1d9e:	8f 93       	push	r24
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
	if(Turn_Bottom==0)
    1da8:	80 91 6a 00 	lds	r24, 0x006A
    1dac:	88 23       	and	r24, r24
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <__vector_1+0x24>
	{
		Turn_Bottom = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	80 93 6a 00 	sts	0x006A, r24
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <__vector_1+0x28>
	}
	else
	{
		Turn_Bottom = 0;
    1db8:	10 92 6a 00 	sts	0x006A, r1
	}
}
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	8f 91       	pop	r24
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f 90       	pop	r0
    1dc8:	1f 90       	pop	r1
    1dca:	18 95       	reti

00001dcc <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    1dcc:	1f 92       	push	r1
    1dce:	0f 92       	push	r0
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	0f 92       	push	r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	8f 93       	push	r24
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
	UP_Heater_Bottom = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	80 93 6b 00 	sts	0x006B, r24
	Tnterrupt_Flag++;
    1de6:	80 91 69 00 	lds	r24, 0x0069
    1dea:	8f 5f       	subi	r24, 0xFF	; 255
    1dec:	80 93 69 00 	sts	0x0069, r24
	Seven_Segment_Flag = 0;
    1df0:	10 92 6f 00 	sts	0x006F, r1
    1df4:	10 92 70 00 	sts	0x0070, r1
    1df8:	10 92 71 00 	sts	0x0071, r1
    1dfc:	10 92 72 00 	sts	0x0072, r1
	LED_Flag = 0;
    1e00:	10 92 73 00 	sts	0x0073, r1
}
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	8f 91       	pop	r24
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1e14:	1f 92       	push	r1
    1e16:	0f 92       	push	r0
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	0f 92       	push	r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	8f 93       	push	r24
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
	DOWN_Cooling_Bottom = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 93 6c 00 	sts	0x006C, r24
	Tnterrupt_Flag++;
    1e2e:	80 91 69 00 	lds	r24, 0x0069
    1e32:	8f 5f       	subi	r24, 0xFF	; 255
    1e34:	80 93 69 00 	sts	0x0069, r24
	Seven_Segment_Flag = 0;
    1e38:	10 92 6f 00 	sts	0x006F, r1
    1e3c:	10 92 70 00 	sts	0x0070, r1
    1e40:	10 92 71 00 	sts	0x0071, r1
    1e44:	10 92 72 00 	sts	0x0072, r1
	LED_Flag = 0;
    1e48:	10 92 73 00 	sts	0x0073, r1

}
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	8f 91       	pop	r24
    1e52:	0f 90       	pop	r0
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	0f 90       	pop	r0
    1e58:	1f 90       	pop	r1
    1e5a:	18 95       	reti

00001e5c <__vector_11>:

void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    1e5c:	1f 92       	push	r1
    1e5e:	0f 92       	push	r0
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	0f 92       	push	r0
    1e64:	11 24       	eor	r1, r1
    1e66:	2f 93       	push	r18
    1e68:	8f 93       	push	r24
    1e6a:	9f 93       	push	r25
    1e6c:	af 93       	push	r26
    1e6e:	bf 93       	push	r27
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62

	Seven_Segment_Flag++;
    1e78:	80 91 6f 00 	lds	r24, 0x006F
    1e7c:	90 91 70 00 	lds	r25, 0x0070
    1e80:	a0 91 71 00 	lds	r26, 0x0071
    1e84:	b0 91 72 00 	lds	r27, 0x0072
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	a1 1d       	adc	r26, r1
    1e8c:	b1 1d       	adc	r27, r1
    1e8e:	80 93 6f 00 	sts	0x006F, r24
    1e92:	90 93 70 00 	sts	0x0070, r25
    1e96:	a0 93 71 00 	sts	0x0071, r26
    1e9a:	b0 93 72 00 	sts	0x0072, r27

	if (Seven_Segment_Flag==310)
    1e9e:	80 91 6f 00 	lds	r24, 0x006F
    1ea2:	90 91 70 00 	lds	r25, 0x0070
    1ea6:	a0 91 71 00 	lds	r26, 0x0071
    1eaa:	b0 91 72 00 	lds	r27, 0x0072
    1eae:	86 33       	cpi	r24, 0x36	; 54
    1eb0:	21 e0       	ldi	r18, 0x01	; 1
    1eb2:	92 07       	cpc	r25, r18
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	a2 07       	cpc	r26, r18
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	b2 07       	cpc	r27, r18
    1ebc:	19 f4       	brne	.+6      	; 0x1ec4 <__vector_11+0x68>
	{
		Tnterrupt_Flag=5;
    1ebe:	85 e0       	ldi	r24, 0x05	; 5
    1ec0:	80 93 69 00 	sts	0x0069, r24
	}

	LED_Count++;
    1ec4:	80 91 74 00 	lds	r24, 0x0074
    1ec8:	8f 5f       	subi	r24, 0xFF	; 255
    1eca:	80 93 74 00 	sts	0x0074, r24
	if(LED_Count==61)
    1ece:	80 91 74 00 	lds	r24, 0x0074
    1ed2:	8d 33       	cpi	r24, 0x3D	; 61
    1ed4:	61 f4       	brne	.+24     	; 0x1eee <__vector_11+0x92>
	{
		if(LED_Flag==0)
    1ed6:	80 91 73 00 	lds	r24, 0x0073
    1eda:	88 23       	and	r24, r24
    1edc:	21 f4       	brne	.+8      	; 0x1ee6 <__vector_11+0x8a>
		{
			LED_Flag=1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	80 93 73 00 	sts	0x0073, r24
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <__vector_11+0x8e>
		}
		else
		{
			LED_Flag=0;
    1ee6:	10 92 73 00 	sts	0x0073, r1
		}

		LED_Count=0;
    1eea:	10 92 74 00 	sts	0x0074, r1
	else
	{
		/* Nothing */
	}

}
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	bf 91       	pop	r27
    1ef4:	af 91       	pop	r26
    1ef6:	9f 91       	pop	r25
    1ef8:	8f 91       	pop	r24
    1efa:	2f 91       	pop	r18
    1efc:	0f 90       	pop	r0
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	0f 90       	pop	r0
    1f02:	1f 90       	pop	r1
    1f04:	18 95       	reti

00001f06 <TIMER0_voidInit>:
#include"BIT_MATH.h"
#include"TIMER_Private.h"
#include"TIMER_Config.h"

void TIMER0_voidInit(void)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE==TIMER0_NORMAL_MODE
	/*Set Normal Timer mode*/
	CLR_BIT(TCCR0,3);
    1f0e:	a3 e5       	ldi	r26, 0x53	; 83
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e3 e5       	ldi	r30, 0x53	; 83
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	87 7f       	andi	r24, 0xF7	; 247
    1f1a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
    1f1c:	a3 e5       	ldi	r26, 0x53	; 83
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e3 e5       	ldi	r30, 0x53	; 83
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	8f 7b       	andi	r24, 0xBF	; 191
    1f28:	8c 93       	st	X, r24
	/*OVERFLOW INTERRUPT ENABLE*/
	SET_BIT(TIMSK,0);
    1f2a:	a9 e5       	ldi	r26, 0x59	; 89
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e9 e5       	ldi	r30, 0x59	; 89
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	81 60       	ori	r24, 0x01	; 1
    1f36:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
#else
	#error"You have error in set TIMER0 MODE"
#endif
	/*Set Prescaler*/
	TCCR0&=TIMER0_BITMASK_PRESCALER;
    1f38:	a3 e5       	ldi	r26, 0x53	; 83
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e3 e5       	ldi	r30, 0x53	; 83
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	88 7f       	andi	r24, 0xF8	; 248
    1f44:	8c 93       	st	X, r24
	TCCR0|=TIMER0_PRESCALER;
    1f46:	a3 e5       	ldi	r26, 0x53	; 83
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e3 e5       	ldi	r30, 0x53	; 83
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	85 60       	ori	r24, 0x05	; 5
    1f52:	8c 93       	st	X, r24
}
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <TIMER0_voidSetPreloadValue>:
void TIMER0_voidSetPreloadValue(u8 Copy_u8Preload)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	0f 92       	push	r0
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
    1f66:	e2 e5       	ldi	r30, 0x52	; 82
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	80 83       	st	Z, r24
}
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <__mulsi3>:
    1f76:	62 9f       	mul	r22, r18
    1f78:	d0 01       	movw	r26, r0
    1f7a:	73 9f       	mul	r23, r19
    1f7c:	f0 01       	movw	r30, r0
    1f7e:	82 9f       	mul	r24, r18
    1f80:	e0 0d       	add	r30, r0
    1f82:	f1 1d       	adc	r31, r1
    1f84:	64 9f       	mul	r22, r20
    1f86:	e0 0d       	add	r30, r0
    1f88:	f1 1d       	adc	r31, r1
    1f8a:	92 9f       	mul	r25, r18
    1f8c:	f0 0d       	add	r31, r0
    1f8e:	83 9f       	mul	r24, r19
    1f90:	f0 0d       	add	r31, r0
    1f92:	74 9f       	mul	r23, r20
    1f94:	f0 0d       	add	r31, r0
    1f96:	65 9f       	mul	r22, r21
    1f98:	f0 0d       	add	r31, r0
    1f9a:	99 27       	eor	r25, r25
    1f9c:	72 9f       	mul	r23, r18
    1f9e:	b0 0d       	add	r27, r0
    1fa0:	e1 1d       	adc	r30, r1
    1fa2:	f9 1f       	adc	r31, r25
    1fa4:	63 9f       	mul	r22, r19
    1fa6:	b0 0d       	add	r27, r0
    1fa8:	e1 1d       	adc	r30, r1
    1faa:	f9 1f       	adc	r31, r25
    1fac:	bd 01       	movw	r22, r26
    1fae:	cf 01       	movw	r24, r30
    1fb0:	11 24       	eor	r1, r1
    1fb2:	08 95       	ret

00001fb4 <__udivmodqi4>:
    1fb4:	99 1b       	sub	r25, r25
    1fb6:	79 e0       	ldi	r23, 0x09	; 9
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <__udivmodqi4_ep>

00001fba <__udivmodqi4_loop>:
    1fba:	99 1f       	adc	r25, r25
    1fbc:	96 17       	cp	r25, r22
    1fbe:	08 f0       	brcs	.+2      	; 0x1fc2 <__udivmodqi4_ep>
    1fc0:	96 1b       	sub	r25, r22

00001fc2 <__udivmodqi4_ep>:
    1fc2:	88 1f       	adc	r24, r24
    1fc4:	7a 95       	dec	r23
    1fc6:	c9 f7       	brne	.-14     	; 0x1fba <__udivmodqi4_loop>
    1fc8:	80 95       	com	r24
    1fca:	08 95       	ret

00001fcc <__udivmodhi4>:
    1fcc:	aa 1b       	sub	r26, r26
    1fce:	bb 1b       	sub	r27, r27
    1fd0:	51 e1       	ldi	r21, 0x11	; 17
    1fd2:	07 c0       	rjmp	.+14     	; 0x1fe2 <__udivmodhi4_ep>

00001fd4 <__udivmodhi4_loop>:
    1fd4:	aa 1f       	adc	r26, r26
    1fd6:	bb 1f       	adc	r27, r27
    1fd8:	a6 17       	cp	r26, r22
    1fda:	b7 07       	cpc	r27, r23
    1fdc:	10 f0       	brcs	.+4      	; 0x1fe2 <__udivmodhi4_ep>
    1fde:	a6 1b       	sub	r26, r22
    1fe0:	b7 0b       	sbc	r27, r23

00001fe2 <__udivmodhi4_ep>:
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	5a 95       	dec	r21
    1fe8:	a9 f7       	brne	.-22     	; 0x1fd4 <__udivmodhi4_loop>
    1fea:	80 95       	com	r24
    1fec:	90 95       	com	r25
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	08 95       	ret

00001ff4 <__prologue_saves__>:
    1ff4:	2f 92       	push	r2
    1ff6:	3f 92       	push	r3
    1ff8:	4f 92       	push	r4
    1ffa:	5f 92       	push	r5
    1ffc:	6f 92       	push	r6
    1ffe:	7f 92       	push	r7
    2000:	8f 92       	push	r8
    2002:	9f 92       	push	r9
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	ca 1b       	sub	r28, r26
    201e:	db 0b       	sbc	r29, r27
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	09 94       	ijmp

0000202c <__epilogue_restores__>:
    202c:	2a 88       	ldd	r2, Y+18	; 0x12
    202e:	39 88       	ldd	r3, Y+17	; 0x11
    2030:	48 88       	ldd	r4, Y+16	; 0x10
    2032:	5f 84       	ldd	r5, Y+15	; 0x0f
    2034:	6e 84       	ldd	r6, Y+14	; 0x0e
    2036:	7d 84       	ldd	r7, Y+13	; 0x0d
    2038:	8c 84       	ldd	r8, Y+12	; 0x0c
    203a:	9b 84       	ldd	r9, Y+11	; 0x0b
    203c:	aa 84       	ldd	r10, Y+10	; 0x0a
    203e:	b9 84       	ldd	r11, Y+9	; 0x09
    2040:	c8 84       	ldd	r12, Y+8	; 0x08
    2042:	df 80       	ldd	r13, Y+7	; 0x07
    2044:	ee 80       	ldd	r14, Y+6	; 0x06
    2046:	fd 80       	ldd	r15, Y+5	; 0x05
    2048:	0c 81       	ldd	r16, Y+4	; 0x04
    204a:	1b 81       	ldd	r17, Y+3	; 0x03
    204c:	aa 81       	ldd	r26, Y+2	; 0x02
    204e:	b9 81       	ldd	r27, Y+1	; 0x01
    2050:	ce 0f       	add	r28, r30
    2052:	d1 1d       	adc	r29, r1
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	ed 01       	movw	r28, r26
    2060:	08 95       	ret

00002062 <_exit>:
    2062:	f8 94       	cli

00002064 <__stop_program>:
    2064:	ff cf       	rjmp	.-2      	; 0x2064 <__stop_program>
